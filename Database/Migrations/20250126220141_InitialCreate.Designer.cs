// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.Controllers.API.Database.Contexts;

#nullable disable

namespace Services.Controllers.API.Database.Migrations
{
    [DbContext(typeof(ServicesDbContext))]
    [Migration("20250126220141_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Services.Controllers.API.Database.Models.WeatherForecastDto", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id")
                        .HasComment("The unique identifier for the weather forecast.");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("Who created the record.");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was created.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date")
                        .HasComment("The date of the weather forecast.");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Summary")
                        .HasComment("A summary description of the weather (e.g., sunny, rainy).");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int")
                        .HasColumnName("TemperatureC")
                        .HasComment("The temperature in Celsius for the forecasted date.");

                    b.Property<int>("TemperatureF")
                        .HasColumnType("int")
                        .HasColumnName("TemperatureF")
                        .HasComment("The temperature in Fahrenheit for the forecasted date, calculated from the temperature in Celsius.");

                    b.HasKey("Id")
                        .HasName("PK_WeatherForecast_WeatherForecastId");

                    b.HasIndex(new[] { "Id" }, "AK_WeatherForecast_WeatherForecastId")
                        .IsUnique();

                    b.ToTable("WeatherForecast", null, t =>
                        {
                            t.HasComment("A weather forecast for a specific date.");
                        });

                    b.HasData(
                        new
                        {
                            Id = "c3d61411-9123-4839-ad75-004507d26e85",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Summary = "Sunny",
                            TemperatureC = 20,
                            TemperatureF = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
